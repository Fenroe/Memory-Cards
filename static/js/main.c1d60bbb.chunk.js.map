{"version":3,"sources":["components/TitleScreen.js","components/Tutorial.js","components/Scoreboard.js","components/Card.js","components/Field.js","components/Game.js","components/Gameover.js","components/Winner.js","App.js","index.js"],"names":["TitleScreen","props","className","onClick","game","tutorial","Tutorial","back","Scoreboard","score","highScore","Card","src","alt","chooseCard","index","Field","currentCards","map","card","process","Game","useState","setScore","setCurrentCards","pickedCards","setPickedCards","fillCurrentCards","cards","i","Math","floor","random","includes","push","notAllPickedCards","hasPickedCard","forEach","length","useEffect","declareWinner","endGame","concat","setHighScore","Gameover","restart","Winner","App","setGame","setTutorial","gameover","setGameover","winner","setWinner","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAgBeA,EAdK,SAACC,GACnB,OACE,sBAAKC,UAAY,eAAjB,UACE,qBAAKA,UAAY,0BAAjB,SACE,oBAAIA,UAAY,gBAAhB,8BAEF,sBAAKA,UAAY,yBAAjB,UACE,wBAAQA,UAAY,aAAaC,QAAWF,EAAMG,KAAlD,mBACA,wBAAQF,UAAY,aAAaC,QAAWF,EAAMI,SAAlD,gCCQOC,EAlBE,SAACL,GAChB,OACE,sBAAKC,UAAY,kBAAjB,UACE,qBAAKA,UAAY,6BAAjB,SACE,oBAAIA,UAAY,mBAAhB,2BAEF,sBAAKA,UAAY,0BAAjB,UACE,mBAAGA,UAAY,gBAAf,4CACA,mBAAGA,UAAY,gBAAf,2DACA,mBAAGA,UAAY,gBAAf,sDAEF,qBAAKA,UAAY,4BAAjB,SACE,wBAAQA,UAAY,aAAaC,QAAWF,EAAMM,KAAlD,wBCCOC,EAbI,SAACP,GAClB,OACE,sBAAKC,UAAY,kBAAjB,UACE,8BACE,yCAAYD,EAAMQ,WAEpB,8BACE,iDAAoBR,EAAMS,mBCCnBC,EARF,SAACV,GACZ,OACE,qBAAKC,UAAY,YAAjB,SACE,qBAAKU,IAAOX,EAAMW,IAAKC,IAAM,OAAOV,QAAW,kBAAMF,EAAMa,WAAWb,EAAMc,aCkBnEC,EAlBD,SAACf,GAWb,OACE,qBAAKC,UAAY,aAAjB,SATsBD,EAAMgB,aAAaC,KAAI,SAAAC,GAC3C,OACE,cAAC,EAAD,CAAmBL,WAAcb,EAAMa,WAAYC,MAASI,EAAMP,IAAG,UAAOQ,gBAAP,+BAAqDD,EAAO,EAA5D,SAAxDA,SCsENE,EAzEF,SAACpB,GACZ,MAA0BqB,mBAAS,GAAnC,mBAAOb,EAAP,KAAcc,EAAd,KAEA,EAAwCD,mBAAS,IAAjD,mBAAOL,EAAP,KAAqBO,EAArB,KAEA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAIMC,EAAmB,SAAnBA,IAEJ,IADA,IAAMC,EAAQ,GACLC,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CAC9B,IAAMV,EAAQW,KAAKC,MAAsB,GAAhBD,KAAKE,UACzBJ,EAAMK,SAASd,GAGlBU,GAAK,EAFLD,EAAMM,KAAKf,GAKXgB,EAAkBP,IAAUQ,EAAcR,GAC5CJ,EAAgBI,GAEhBD,KAIEQ,EAAoB,SAACP,GACzB,IAAIO,GAAoB,EAMxB,OALAP,EAAMS,SAAQ,SAAAlB,GACPM,EAAYQ,SAASd,KACxBgB,GAAoB,MAGjBA,GAGHC,EAAgB,SAACR,GACrB,IAAIQ,GAAgB,EASpB,OAR2B,IAAvBX,EAAYa,SACdF,GAAgB,GAElBR,EAAMS,SAAQ,SAAAlB,GACRM,EAAYQ,SAASd,KACvBiB,GAAgB,MAGbA,GAmBT,OAJAG,qBAAU,WACR9B,EAvDe,GAuDIkB,IAAqB1B,EAAMuC,kBAC7C,CAAC/B,IAGF,sBAAKP,UAAY,cAAjB,UACE,cAAC,EAAD,CAAYO,MAASA,EAAOC,UAAaT,EAAMS,YAC/C,cAAC,EAAD,CAAOO,aAAgBA,EAAcU,iBAAoBA,EAAkBb,WAnB5D,SAACK,GACbM,EAAYQ,SAASd,GAOxBlB,EAAMwC,WANNf,EAAeD,EAAYiB,OAAO,CAACvB,KACnCI,EAASd,EAAQ,GACbA,EAAQ,EAAIR,EAAMS,WACpBT,EAAM0C,aAAalC,EAAQ,WC/CpBmC,EAZE,SAAC3C,GAChB,OACE,sBAAKC,UAAY,mBAAjB,UACE,oBAAIA,UAAY,oBAAhB,uBACA,qBAAIA,UAAY,iBAAhB,gCAAqDD,EAAMS,aAC3D,qBAAKR,UAAY,6BAAjB,SACE,wBAAQA,UAAY,aAAaC,QAAWF,EAAM4C,QAAlD,gCCAOC,EANA,aCgFAC,MAhDf,WACE,MAAwBzB,oBAAS,GAAjC,mBAAOlB,EAAP,KAAa4C,EAAb,KAEA,EAAgC1B,oBAAS,GAAzC,mBAAOjB,EAAP,KAAiB4C,EAAjB,KAEA,EAAkC3B,mBAAS,GAA3C,mBAAOZ,EAAP,KAAkBiC,EAAlB,KAEA,EAAgCrB,oBAAS,GAAzC,mBAAO4B,EAAP,KAAiBC,EAAjB,KAEA,EAA4B7B,oBAAS,GAArC,mBAAO8B,EAAP,KAAeC,EAAf,KA4BA,OACE,sBAAKnD,UAAY,cAAjB,UACIE,GAASC,GAAa6C,GAAaE,EAAyE,KAAhE,cAAC,EAAD,CAAahD,KA5B7C,WAChB4C,GAAQ,IA2BwE3C,SAnB5D,WACpB4C,GAAY,MAmBT5C,EAAW,cAAC,EAAD,CAAUE,KAhBN,WAClB0C,GAAY,MAeqC,KAC9C7C,EAAO,cAAC,EAAD,CAAMM,UAAaA,EAAWiC,aAAgBA,EAAcF,QA1BxD,WACdO,GAAQ,GACRG,GAAY,IAwB8EX,cAbtE,WACpBQ,GAAQ,GACRK,GAAU,MAWoH,KAC3HH,EAAW,cAAC,EAAD,CAAUxC,UAAaA,EAAWmC,QAT9B,WAClBM,GAAY,MAQgE,KACzEC,EAAS,cAAC,EAAD,IAAa,S,MCrE7BE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c1d60bbb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TitleScreen = (props) => {\n  return (\n    <div className = 'title-screen'>\n      <div className = 'title-heading-container'>\n        <h1 className = 'title-heading'>52 Card Pickup</h1>\n      </div>\n      <div className = 'title-button-container'>\n        <button className = 'app-button' onClick = {props.game}>Start</button>\n        <button className = 'app-button' onClick = {props.tutorial}>How To Play</button>\n      </div>\n    </div>\n  )\n}\n\nexport default TitleScreen;\n","const Tutorial = (props) => {\n  return (\n    <div className = 'tutorial-screen'>\n      <div className = 'tutorial-heading-container'>\n        <h2 className = 'tutorial-heading'>How To Play</h2>\n      </div>\n      <div className = 'tutorial-text-container'>\n        <p className = 'tutorial-text'>Click on a card to pick it up.</p>\n        <p className = 'tutorial-text'>If you click on the same card twice you lose.</p>\n        <p className = 'tutorial-text'>Pick up all 52 cards to win the game!</p>\n      </div>\n      <div className = 'tutorial-button-container'>\n        <button className = 'app-button' onClick = {props.back}>Back</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Tutorial;\n","const Scoreboard = (props) => {\n  return (\n    <div className = 'game-scoreboard'>\n      <div>\n        <h2>Score: {props.score}</h2>\n      </div>\n      <div>\n        <h2>Highest Score: {props.highScore}</h2>\n      </div>\n    </div>\n  )\n}\n\nexport default Scoreboard;\n","const Card = (props) => {\n  return (\n    <div className = 'game-card'>\n      <img src = {props.src} alt = 'card' onClick = {() => props.chooseCard(props.index)}/>\n    </div>\n  )\n}\n\nexport default Card;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport Card from './Card';\n\nconst Field = (props) => {\n\n  const renderCards = () => {\n    const renderedCards = props.currentCards.map(card => {\n      return (\n        <Card key = {card} chooseCard = {props.chooseCard} index = {card} src = {`${process.env.PUBLIC_URL}/assets/images/card_${(card + 1)}.png`}/>\n      )\n    })\n    return renderedCards;\n  }\n\n  return (\n    <div className = 'game-field'>\n      {renderCards()}\n    </div>\n  )\n}\n\nexport default Field;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from \"react\";\nimport Scoreboard from \"./Scoreboard\";\nimport Field from \"./Field\";\n\nconst Game = (props) => {\n  const [score, setScore] = useState(0);\n\n  const [currentCards, setCurrentCards] = useState([]);\n\n  const [pickedCards, setPickedCards] = useState([]);\n\n  const maxScore = 52;\n\n  const fillCurrentCards = () => {\n    const cards = [];\n    for (let i = 0; i < 12; i += 1) {\n      const card  = Math.floor(Math.random() * 52);\n      if (!cards.includes(card)) {\n        cards.push(card);\n      } else {\n        i -= 1;\n      }\n    }\n    if (notAllPickedCards(cards) && hasPickedCard(cards)) {\n      setCurrentCards(cards);\n    } else {\n      fillCurrentCards();\n    }\n  }\n\n  const notAllPickedCards = (cards) => {\n    let notAllPickedCards = false;\n    cards.forEach(card => {\n      if (!pickedCards.includes(card)) {\n        notAllPickedCards = true;\n      }\n    })\n    return notAllPickedCards;\n  }\n\n  const hasPickedCard = (cards) => {\n    let hasPickedCard = false;\n    if (pickedCards.length === 0) {\n      hasPickedCard = true;\n    }\n    cards.forEach(card => {\n      if (pickedCards.includes(card)) {\n        hasPickedCard = true;\n      }\n    })\n    return hasPickedCard;\n  }\n\n  const chooseCard = (card) => {\n    if (!pickedCards.includes(card)) {\n      setPickedCards(pickedCards.concat([card]));\n      setScore(score + 1);\n      if (score + 1 > props.highScore) {\n        props.setHighScore(score + 1);\n      } \n    } else {\n      props.endGame();\n    }\n  }\n\n  useEffect(() => {\n    score < maxScore ? fillCurrentCards() : props.declareWinner();\n  }, [score])\n\n  return (\n    <div className = 'game-screen'>\n      <Scoreboard score = {score} highScore = {props.highScore}/>\n      <Field currentCards = {currentCards} fillCurrentCards = {fillCurrentCards} chooseCard = {chooseCard}/>\n    </div>\n  )\n}\n\nexport default Game;\n","const Gameover = (props) => {\n  return (\n    <div className = 'game-over-screen'>\n      <h2 className = 'game-over-heading'>Game Over</h2>\n      <h2 className = 'game-over-text'>Your best score is {props.highScore}</h2>\n      <div className = 'game-over-button-container'>\n        <button className = 'app-button' onClick = {props.restart}>Title Screen</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Gameover;\n","const Winner = () => {\n  <div className = 'winner-screen'>\n    <h2 className = 'winner-heading'>Amazing!</h2>\n  </div>\n}\n\nexport default Winner;\n","// '52 card pickup': memory game, clicking on a card gives a point, click on the same card twice and game over\n// loading app comes to a title screen.\n// - start button sets the game state to true, starting the game\n// - how to play sets the tutorial state to true, showing the rules of the game. \n// - a back button will set the tutorial state to false, returning to title screen\n// game component needs a scoreboard and card table\n// - scoreboard should track current score\n// - scoreboard should show the highest score ever earned by the player\n// - card table serves as a container for the cards\n// when game starts call a function that fills an array with numbers from 0-51\n// - if n is already in array, don't add it again \n// - if array length = 12, stop\n// use this array to generate an equal number of card components \n// - card components are divs with an image\n// - the src of this image will be '../assets/card_' + (item+1) +'.png'\n// cards also need a key (the array item)\n// cards need an addClick that adds their key to an array of chosen cards\n// - if key is already in chosen cards, game over\n// after this, cards will be reshuffled\n// because there needs to be a chance of failing, the hand should always have a card from chosen cards\n// - if after hand array is full there is no card from chosen cards and chosen cards isn't empty, reshuffle\n// because there always needs to be a chance of success, the hand should not solely consist of cards from chosen cards\n// - if after hand array is full there is nothing but chosen cards in hand, reshuffle\n// if score is 52 then player has won \nimport React, { useState } from \"react\";\nimport TitleScreen from \"./components/TitleScreen\";\nimport Tutorial from \"./components/Tutorial\";\nimport Game from \"./components/Game\";\nimport Gameover from \"./components/Gameover\";\nimport Winner from \"./components/Winner\";\n\n\nfunction App() {\n  const [game, setGame] = useState(false);\n\n  const [tutorial, setTutorial] = useState(false);\n\n  const [highScore, setHighScore] = useState(0);\n\n  const [gameover, setGameover] = useState(false);\n\n  const [winner, setWinner] = useState(false);\n\n  const startGame = () => {\n    setGame(true);\n  };\n\n  const endGame = () => {\n    setGame(false);\n    setGameover(true);\n  }\n\n  const startTutorial = () => {\n    setTutorial(true);\n  };\n\n  const endTutorial = () => {\n    setTutorial(false);\n  };\n\n  const declareWinner = () => {\n    setGame(false);\n    setWinner(true);\n  }\n\n  const endGameover = () => {\n    setGameover(false);\n  }\n\n  return (\n    <div className = 'app-screens'>\n      {!game && !tutorial && !gameover && !winner ? <TitleScreen game = {startGame} tutorial = {startTutorial} /> : null}\n      {tutorial ? <Tutorial back = {endTutorial}/> : null}\n      {game ? <Game highScore = {highScore} setHighScore = {setHighScore} endGame = {endGame} declareWinner = {declareWinner}/> : null}\n      {gameover ? <Gameover highScore = {highScore} restart = {endGameover}/> : null}\n      {winner ? <Winner /> : null}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './style/main.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}